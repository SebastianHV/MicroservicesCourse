spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.h2.console.enabled=true
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
server.port=8080

#We add these lines to connect to config server
#This is the name of the application, equal to the name of the property files
spring.application.name=accounts
#This is the current active environment where we want to execute the microservice
spring.profiles.active=prod
#This will tell what is the config server endpoint URL where we will get all the files
spring.config.import=optional:configserver:http://localhost:8071

management.endpoints.web.exposure.include=*

#When the mService restarts, it will do it with the IP address
eureka.instance.preferIpAddress = true 
eureka.client.registerWithEureka = true
eureka.client.fetchRegistry = true
eureka.client.serviceUrl.defaultZone = http://localhost:8070/eureka/

#Configuring info endpoint
#This will ve displayed when we call the info endpoint "/info" of the actuator
management.info.env.enabled=true
info.app.name=Accounts Microservice
info.app.description=Eazy Bank Accounts Application
info.app.version=1.0.0

#Enable endpoint that will allow to shut down gracefully the app
endpoints.shutdown.enabled=true
management.endpoint.shutdown.enabled=true

#Configurations for the Circuit Breaker Patter
#I'm telling to register all the circuit breaker health information in the actuator
resilience4j.circuitbreaker.configs.default.registerHealthIndicator= true
#Monitor at least 5 invocations to decide whether to open the circuit or not
resilience4j.circuitbreaker.instances.detailsForCustomerSupportApp.minimumNumberOfCalls= 5
#Treshold to open the circuit, in percentage
resilience4j.circuitbreaker.instances.detailsForCustomerSupportApp.failureRateThreshold= 50
#Time to wait before half-open the circuit, in miliseconds
resilience4j.circuitbreaker.instances.detailsForCustomerSupportApp.waitDurationInOpenState= 30000
#Allowed requests in half-open state, it has to success at more than 50% to close the circuit again
resilience4j.circuitbreaker.instances.detailsForCustomerSupportApp.permittedNumberOfCallsInHalfOpenState=2

#Condiguration for Retry Pattern
#Register and expose indicators to actuator
resilience4j.retry.configs.default.registerHealthIndicator= true
#Max number of attempts, including the original request
resilience4j.retry.instances.retryForCustomerDetails.maxRetryAttempts=3
#Retries in this amount of time
resilience4j.retry.instances.retryForCustomerDetails.waitDuration=2000
